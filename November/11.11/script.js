"use strict";

// 1. Cockroach
/*
The cockroach is one of the fastest insects. 
Write a function which takes its speed in km per hour and returns it in cm per second, rounded down to the integer (= floored).

–ó–∞–¥–∞—á–∞ -
1. –ú—ã –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∏–ª–æ–º–µ—Ç—Ä—ã –≤ —á–∞—Å
2. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Å–∞–Ω—Ç–∏–º–µ—Ä—Ç—ã –∑–∞ —Å–µ–∫—É–Ω–¥—É

–†–µ—à–µ–Ω–∏–µ -
1. –ö–∞–∫ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∏–ª–æ–º–µ—Ç—Ä—ã –≤ —á–∞—Å –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä—ã –∑–∞ —Å–µ–∫—É–Ω–¥—É? - –∫–∏–ª–æ–º–µ—Ç—Ä—ã –≤ —á–∞—Å —Ä–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ 0.036
2. Math.floor() - –∫ –Ω–∏–∂–Ω–µ–º—É –∑–Ω–∞—á–µ–Ω–∏—é –æ–∫—Ä—É–≥–ª–∏—Ç—å
*/

function cockroachSpeed(s) {
  return Math.floor(s / 0.036);
}

// console.log(cockroachSpeed(1.08));

/*
–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
–ê–ª–≥–æ—Ä–∏—Ç–º –∏–º–µ–µ—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã 
ùëÇ(1)
O(1), —Ç–∞–∫ –∫–∞–∫ –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –∑–∞ –æ–¥–Ω—É –∏—Ç–µ—Ä–∞—Ü–∏—é:

–î–µ–ª–µ–Ω–∏–µ (–æ–¥–Ω–æ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ),
–û–∫—Ä—É–≥–ª–µ–Ω–∏–µ (–æ–¥–Ω–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ).
–¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, —ç—Ç–æ —Ä–µ—à–µ–Ω–∏–µ –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ–µ –∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π –¥–ª—è –º–∞–ª—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

–ü–æ—è—Å–Ω–µ–Ω–∏—è
–î–µ–ª–µ–Ω–∏–µ: –î–µ–ª–µ–Ω–∏–µ –Ω–∞ 0.036 —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –∫–∏–ª–æ–º–µ—Ç—Ä—ã –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä—ã –∑–∞ —Å–µ–∫—É–Ω–¥—É. –≠—Ç–æ –¥–æ–≤–æ–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –±—ã—Å—Ç—Ä–æ.

Math.floor(): –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–Ω–∏–∑ ‚Äî –æ–ø–µ—Ä–∞—Ü–∏—è —Ç–æ–∂–µ –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–∞—è, –ø–æ—Å–∫–æ–ª—å–∫—É –æ–Ω–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞ –æ–¥–Ω–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏, –∏ JavaScript –æ—á–µ–Ω—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —á–∏—Å–ª–∞–º–∏ —Å –ø–ª–∞–≤–∞—é—â–µ–π –∑–∞–ø—è—Ç–æ–π.

–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
–¢–æ—á–Ω–æ—Å—Ç—å –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è: –ï—Å–ª–∏ –≤–∞–∂–Ω–∞ —Ç–æ—á–Ω–æ—Å—Ç—å, —Ç–æ —Å–ª–µ–¥—É–µ—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å, —á—Ç–æ –≤ JavaScript –¥–µ–ª–µ–Ω–∏–µ —Å –ø–ª–∞–≤–∞—é—â–µ–π –∑–∞–ø—è—Ç–æ–π –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –Ω–µ–±–æ–ª—å—à–∏–µ –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏, 
–æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–º–∏ –∏–ª–∏ –æ—á–µ–Ω—å –º–∞–ª—ã–º–∏ —á–∏—Å–ª–∞–º–∏. –û–¥–Ω–∞–∫–æ –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Å–ª—É—á–∞–µ–≤ —ç—Ç–æ —Ä–µ—à–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.

–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: –í –∫–æ–¥–µ –Ω–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Ç–∏–ø –∏–ª–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ –∞—Ä–≥—É–º–µ–Ω—Ç –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç —á–∏—Å–ª–æ–º, 
—ç—Ç–æ –Ω–µ –ø—Ä–æ–±–ª–µ–º–∞, –Ω–æ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ—á–∏—Å–ª–æ–≤—ã–º–∏, –ª—É—á—à–µ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–∏–ø–∞.
*/

// 2. Volume of a Cuboid
/*
1. –ö–∞–∫ –≤—ã–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ class –≤ console.log JavaScript
2. –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ cuboid

–†–µ—à–µ–Ω–∏–µ -

*/
class Kata {
  static getVolumeOfCuboid(length, width, height) {
    return length * width * height;
  }
}

const firstCuboid = Kata.getVolumeOfCuboid(1, 2, 2);

// console.log(firstCuboid)

/*
–û—Ü–µ–Ω–∫–∞ —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:
–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —ç—Ç–æ–≥–æ –∫–æ–¥–∞ –∞–±—Å–æ–ª—é—Ç–Ω–æ –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤. –£–º–Ω–æ–∂–µ–Ω–∏–µ —Ç—Ä–µ—Ö —á–∏—Å–µ–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞ 
ùëÇ(1)
O(1), –∏ —ç—Ç–æ –Ω–µ –±—É–¥–µ—Ç –∏–º–µ—Ç—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–ª–∏—è–Ω–∏—è –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏ –ª—é–±—ã—Ö –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö.
–í–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã:
–í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –≤ –∫–ª–∞—Å—Å–µ Kata, —á—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏, —Ç–∞–∫ –∫–∞–∫ –º–µ—Ç–æ–¥ –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞, –∞ —Ç–æ–ª—å–∫–æ –æ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.
*/

// 3. Find the first non-consecutive number

function firstNonConsecutive(arr) {
  for (let i = 1; i < arr.length; i++) {
    if (arr[i - 1] + 1 !== arr[i]) return arr[i];
  }

  return null;
}

// console.log(firstNonConsecutive([1, 2, 3, 4, 6, 7, 8]));

// 4. Replace With Alphabet Position
/*
Welcome.

In this kata you are required to, given a string, replace every letter with its position in the alphabet.

If anything in the text isn't a letter, ignore it and don't return it.

"a" = 1, "b" = 2, etc.

Example
Input = "The sunset sets at twelve o' clock."
Output = "20 8 5 19 21 14 19 5 20 19 5 20 19 1 20 20 23 5 12 22 5 15 3 12 15 3 11"

–ó–∞–¥–∞—á–∞ - 
1. –í—Å—ë —á—Ç–æ –Ω–µ –±—É–∫–≤–∞ - –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å(match(a-z-A-Z)) –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Å –∫–æ—Ç–æ—Ä–æ–π —Ä–∞–±–æ—Ç–∞—Ç—å
2. –ö–∞–∂–¥—É—é –±—É–∫–≤—É –∑–∞–º–µ–Ω–∏—Ç—å –µ—ë –ø–æ–∑–∏—Ü–∏–µ–π –≤ –∞–ª—Ñ–∞–≤–∏—Ç–µ - –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞–∑–±–∏—Ç—å —Å—Ç—Ä–æ–∫—É –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –±—É–∫–≤—ã –∏ –ø–æ—Ç–æ–º –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∫ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É(map) –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
—ç—Ç–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —á–∏—Å–ª–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –µ–≥–æ –ø–æ–∑–∏—Ü–∏–∏ –≤ –∞–ª—Ñ–∞–≤–∏—Ç–µ
*/

function alphabetPosition(text) {
  const arrayWithLettersOnly = [...text].filter(
    (el) => !el.replace(/^[A-Za-z]+$/, "")
  );

  return arrayWithLettersOnly.map((a) => parseInt(a, 36) - 9).join(" ");
}

// console.log(alphabetPosition(`The sunset sets at twelve o' clock`));

// 5. Persistent Bugger.
/*
Write a function, persistence, that takes in a positive parameter num and returns its multiplicative persistence, which is the number of times you must multiply the digits in num until you reach a single digit.

For example (Input --> Output):

39 --> 3 (because 3*9 = 27, 2*7 = 14, 1*4 = 4 and 4 has only one digit, there are 3 multiplications)
999 --> 4 (because 9*9*9 = 729, 7*2*9 = 126, 1*2*6 = 12, and finally 1*2 = 2, there are 4 multiplications)
4 --> 0 (because 4 is already a one-digit number, there is no multiplication)

–ó–∞–¥–∞—á–∞ - —É–ø—Ä–æ—Å—Ç–∏—Ç—å —á–∏—Å–ª–æ –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∏ –≤–µ—Ä–Ω—É—Ç—å —ç—Ç–æ —á–∏—Å–ª–æ(typeof number)

–†–µ—à–µ–Ω–∏–µ -
1. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞–∑–±–∏—Ç—å —á–∏—Å–ª–æ –Ω–∞ –º–∞—Å—Å–∏–≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª => 39 = [3, 9]
2. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —ç—Ç–∏ —á–∏—Å–ª–∞ –ø–µ—Ä–µ–º–Ω–æ–∂–∏—Ç—å –º–µ–∂–¥—É –¥—Ä—É–≥ –¥—Ä—É–≥–æ–º - [3, 9] => 3*9 => 27
3. –ü–æ–≤—Ç–æ—Ä—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –Ω–µ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –û–î–ù–û —á–∏—Å–ª–æ(1-9) –∏ –≤–µ—Ä–Ω—É—Ç—å —ç—Ç–æ —á–∏—Å–ª–æ —á–µ—Ä–µ–∑ return
*/

function persistence(num) {
  let counter = 0;
  while (num >= 10) {
    num = [...num.toString()].reduce((a, b) => a * b, 1);
    counter++;
  }

  return counter;
}

// console.log(persistence(999)); 
